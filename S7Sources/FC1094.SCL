FUNCTION FC1094 : VOID
NAME    : 'FC_AO'
AUTHOR  : 'YACINEAA'
FAMILY  : 'AO'
VERSION : '1.0'


//GNU General Public License v3.0
//--------------------------------------------------------------------------------------------------------------------------------------
//-- Object         Management of Analog outputs (AO)
//-- Type           Function
//-- Version        1
//--------------------------------------------------------------------------------------------------------------------------------------
//--Author          Yacine A.A.
//--Organization    2020 COPAG, Industrial project management office, Department of operational technology / Taroudant, Morocco          
//--Description     This block takes care of handling for analog output objects, this is in particular:
//                      - The activation of the Internal Status in the different modes.
//                      - Unscaling OF physical Input value into raw output.
//                      - Limitation of output value.
//                      - Faults handling.
//-----------------------------------------------------------------------------------------------------------------
//--History
//--[Version]            [Name]                        [DATE]                    [Comments]
//--1.00                 Yacine AA                     25-01-21                  Creation
//--------------------------------------------------------------------------------------------------------------------------------------
//-----ToDo
//-- Calculate Hardware fault via module diagnostic 
//-- 
//---
//---
//--------------------------------------------------------------------------------------------------------------------------------------
//-----HELP
//----TypeID : 
//--- 0 : 
//--- 1 : 
//--- 3 : 
//--- 2 : 
//----Arrays : 
// Setting_00 : INT : ID type of the object (see function help)
// Setting_01 : INT : Grace period before fault [100ms]
// Setting_02 : INT  : Spare integer
// Setting_03 : INT  : Analog output minimum raw value
// Setting_04 : INT  : Analog output maximum raw value
// Setting_05 : REAL : Engineering units input minimum Value [EU]
// Setting_06 : REAL : Engineering units input maximum Value [EU]
// Setting_07 : REAL : Engineering units input minimum limit [EU]
// Setting_08 : REAL : Engineering units input maximum limit [EU]
// Buffer_00 : INT : Grace period before fault [100ms]
// Buffer_01 : REAL : Spare   
// Register[0] : INT : Fault counter
// Register[1] : INT : Manual mode counter
// Register[2] : INT : Suppression mode counter
// Register[3] : INT : Spare register
// AccessLevel[0] : INT : Access level 0 : for manual main operation
// AccessLevel[1] : INT : Access level 1 : for suppression mode 
// AccessLevel[2] : INT : Access level 2 : for setting
// AccessLevel[3] : INT : Access level 3 : for advanced setting


VAR_IN_OUT
    AO                      : UDT_AO ; //Standerd user data type for Analog inputs AO
END_VAR

VAR_TEMP
    Ack                     : BOOL ; //Acknowledgment temporary working bit 
    PostiveEdge100ms        : BOOL ; //Positive edge for 100ms (10Hz) 
    PostiveEdge1s           : BOOL ; //Positive edge for 1s (1Hz) 
    Acknowledgment          : BOOL ; //Acknowledgment for motor zone
    Simulation              : BOOL ; //Simulation mode in motor zone
END_VAR 



BEGIN

//Loading utilities
PostiveEdge100ms   := "Frm_100ms" ;
PostiveEdge1s      := "Frm_1s" ; 
Acknowledgment     := "DB_COM_HMI".ACQ_DE_HMI_MEM ;
Simulation         := "MODE_SIM" ; 

//Simulation = Zone Simulation or element Simulation
AO.WorkingMode0 := Simulation OR "DB_SCADA".SimulationMode_0 ;

//Acknowledgment = Zone acknowledgment or element acknowledgment
Ack := AO.Acknowledgment OR Acknowledgment;
//Resetting faults
IF Ack THEN
    AO.Fault_00     := False;
    AO.Fault_01     := False;
    AO.Fault_02     := False;
    AO.Fault_03     := False;
    AO.Fault_04     := False;
    AO.Fault_05     := False;
    AO.Fault_06     := False;
    AO.Fault_07     := False;
    AO.Acknowledged := True;
END_IF;

//Deny suppression modes
IF AO.WorkingMode2  THEN 
    AO.WorkingMode1 := False; 
    AO.WorkingMode4 := True;
END_IF;

//Deny manual modes
IF AO.WorkingMode4  THEN AO.WorkingMode3 := False; END_IF;

//Manual Mode
IF NOT AO.WorkingMode3 THEN AO.Value := AO.Input; END_IF;

//Limitting
IF AO.SettingReal[7] < AO.SettingReal[5] THEN AO.SettingReal[7] := AO.SettingReal[5]; END_IF;
IF AO.SettingReal[8] > AO.SettingReal[6] THEN AO.SettingReal[8] := AO.SettingReal[6]; END_IF;
IF NOT AO.WorkingMode5 THEN
    IF AO.Value > AO.SettingReal[6] THEN
        AO.Fault_01 := True;
        IF AO.SettingReal[6] > AO.SettingReal[5] THEN AO.Value :=  AO.SettingReal[6]; END_IF;
        IF AO.SettingReal[6] < AO.SettingReal[5] THEN AO.Value :=  AO.SettingReal[5]; END_IF;
    END_IF;
    IF AO.Value < AO.SettingReal[5] THEN
        AO.Fault_04 := True;
        IF AO.SettingReal[6] > AO.SettingReal[5] THEN AO.Value :=  AO.SettingReal[5]; END_IF;
        IF AO.SettingReal[6] < AO.SettingReal[5] THEN AO.Value :=  AO.SettingReal[6]; END_IF;
    END_IF;
ELSE
    IF AO.Value > AO.SettingReal[8] THEN
        IF AO.SettingReal[8] > AO.SettingReal[7] THEN AO.Value :=  AO.SettingReal[8]; END_IF;
        IF AO.SettingReal[8] < AO.SettingReal[7] THEN AO.Value :=  AO.SettingReal[7]; END_IF;
    END_IF;
    IF AO.Value < AO.SettingReal[7] THEN
        IF AO.SettingReal[8] > AO.SettingReal[7] THEN AO.Value :=  AO.SettingReal[7]; END_IF;
        IF AO.SettingReal[8] < AO.SettingReal[7] THEN AO.Value :=  AO.SettingReal[8]; END_IF;
    END_IF;
END_IF;   

//Unscalling  
IF AO.SettingReal[6] > AO.SettingReal[5] THEN  
    AO.Output := REAL_TO_INT(AO.SettingInt[3] + (((AO.Value - AO.SettingReal[5])*(AO.SettingInt[4] - AO.SettingInt[3]))/(AO.SettingReal[6] - AO.SettingReal[5])));
END_IF;        

//Manual & suppression modes
IF AO.WorkingMode1 AND NOT AO.Bit[1] THEN AO.Register[2] := AO.Register[2] + 1; AO.Acknowledgment := True ; END_IF;
IF AO.WorkingMode3 AND NOT AO.Bit[3] THEN AO.Register[1] := AO.Register[1] + 1; END_IF;

//Summing main faults : 00
IF (AO.Fault_01 OR AO.Fault_04 OR AO.Fault_05 OR AO.Fault_06 OR AO.Fault_07) AND NOT (AO.WorkingMode0 OR AO.WorkingMode1 OR AO.WorkingMode3) THEN
    IF PostiveEdge100ms THEN AO.Buffer_00 := AO.Buffer_00 + 1 ; END_IF;
    IF AO.Buffer_00 >= AO.SettingInt[1] THEN AO.Fault_00 := True ; END_IF;
    IF AO.Fault_00 AND NOT AO.Bit[0] THEN AO.Register[0] := AO.Register[0] + 1; END_IF;
ELSE
    AO.Acknowledged       := False;
    AO.Buffer_00 := 0;
END_IF;


//Access levels monitoring
IF AO.AccessLevel[3] > 9999               THEN AO.AccessLevel[3] := 9999; END_IF;
IF AO.AccessLevel[3] < AO.AccessLevel[2]  THEN AO.AccessLevel[3] := AO.AccessLevel[2] + 1; END_IF;
IF AO.AccessLevel[2] < AO.AccessLevel[1]  THEN AO.AccessLevel[2] := AO.AccessLevel[1] + 1; END_IF;
IF AO.AccessLevel[1] < AO.AccessLevel[0]  THEN AO.AccessLevel[1] := AO.AccessLevel[0] + 1; END_IF;
IF AO.AccessLevel[0] < 0                  THEN AO.AccessLevel[0] := 0; END_IF;

//Edgging
AO.Bit[0] := AO.Fault_00 ;     //Sum of object faults
AO.Bit[1] := AO.WorkingMode1 ; //Mode suppression
AO.Bit[3] := AO.WorkingMode3 ; //Mode manual

//Calulating number of forced, inhibited and in fault elements [Legacy]
IF AO.WorkingMode3   THEN "DB_SCADA".AOForc  := "DB_SCADA".AOForc  + 1 ; END_IF;
IF AO.WorkingMode1   THEN "DB_SCADA".AOInhib := "DB_SCADA".AOInhib + 1 ; END_IF;
IF AO.Fault_00       THEN "DB_SCADA".AOFault := "DB_SCADA".AOFault + 1 ; END_IF;

//Resetting Acknowledgment
IF Ack AND NOT (AO.WorkingMode0 OR AO.WorkingMode1) THEN AO.Acknowledgment:=FALSE; END_IF;

END_FUNCTION
 

