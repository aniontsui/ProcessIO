FUNCTION FC1093 : VOID
NAME    : 'FC_AI'
AUTHOR  : 'YACINEAA'
FAMILY  : 'AI'
VERSION : '1.0'


//GNU General Public License v3.0
//--------------------------------------------------------------------------------------------------------------------------------------
//-- Object         Management of Analog input (AI)
//-- Type           Function
//-- Version        1
//--------------------------------------------------------------------------------------------------------------------------------------
//--Author          Yacine A.A.
//--Organization    2020 COPAG, Industrial project management office, Department of operational technology / Taroudant, Morocco          
//--Description     This block takes care of handling for analog input objects, this is in particular:
//                      - The activation of the Internal Status in the different modes.
//                      - Scaling OF raw Input value into physical engineering units.
//                      - Filter on raw input.
//                      - Limitation of output value.
//                      - Faults handling.
//-----------------------------------------------------------------------------------------------------------------
//--History
//--[Version]            [Name]                        [DATE]                    [Comments]
//--1.00                 Yacine AA                     15-01-21                  Creation
//--------------------------------------------------------------------------------------------------------------------------------------
//-----ToDo
//-- Calculate Hardware fault via module diagnostic 
//-- 
//---
//---
//--------------------------------------------------------------------------------------------------------------------------------------
//-----HELP
//----TypeID : 
//--- 0 : 
//--- 1 : 
//--- 3 : 
//--- 2 : 



VAR_IN_OUT
    AI                      : UDT_AI ; //Standerd user data type for Analog inputs AI
END_VAR

VAR_INPUT
    PostiveEdge100ms        : BOOL ; //Positive edge for 100ms (10Hz) 
    PostiveEdge1s           : BOOL ; //Positive edge for 1s (1Hz) 
    Acknowledgment          : BOOL ; //Acknowledgment for motor zone
    Simulation              : BOOL ; //Simulation mode in motor zone
END_VAR

VAR_TEMP
    Ack                     : BOOL ; //Acknowledgment temporary working bit 
    ExpRate                 : REAL ; // Equals exp(-Sample_T / F_tau)
END_VAR 



BEGIN

//Simulation = Zone Simulation or element Simulation
AI.WorkingMode0 := Simulation OR "DB_SCADA".SimulationMode_0 ;

//Acknowledgment = Zone acknowledgment or element acknowledgment
Ack := AI.Acknowledgment OR Acknowledgment;
//Resetting faults
IF Ack THEN
    AI.Fault_00     := False;
    AI.Fault_01     := False;
    AI.Fault_02     := False;
    AI.Fault_03     := False;
    AI.Fault_04     := False;
    AI.Fault_05     := False;
    AI.Fault_06     := False;
    AI.Fault_07     := False;
    AI.Acknowledged := True;
END_IF;

//Deny suppression modes
IF AI.WorkingMode2  THEN 
    AI.WorkingMode1 := False; 
    AI.WorkingMode4 := True;
END_IF;

//Deny manual modes
IF AI.WorkingMode4  THEN AI.WorkingMode3 := False; END_IF;

//Scalling  
IF AI.Setting._04 > AI.Setting._03 THEN  
    AI.Output := AI.Setting._05 + (((AI.Input - AI.Setting._03)*(AI.Setting._06 - AI.Setting._05))/(AI.Setting._04 - AI.Setting._03));
END_IF;        

//Limitting
IF AI.WorkingMode5 THEN
    IF AI.Output > AI.Setting._06 THEN
        IF AI.Setting._06 > AI.Setting._05 THEN AI.Output :=  AI.Setting._06; END_IF;
        IF AI.Setting._06 < AI.Setting._05 THEN AI.Output :=  AI.Setting._05; END_IF;
    END_IF;
    IF AI.Output < AI.Setting._05 THEN
        IF AI.Setting._06 > AI.Setting._05 THEN AI.Output :=  AI.Setting._05; END_IF;
        IF AI.Setting._06 < AI.Setting._05 THEN AI.Output :=  AI.Setting._06; END_IF;
    END_IF;
END_IF;   

//Filterring & assignment of value
IF AI.Setting._07 > 0.0 AND "DB_SCADA".PrevCycle > 0.0 AND NOT AI.WorkingMode3 THEN
    ExpRate               := EXP(- "DB_SCADA".PrevCycle / AI.Setting._07 );
    AI.Value              := AI.Setting.Buffer._01 * ExpRate + (AI.Output  * (1 - ExpRate));
    AI.Setting.Buffer._01 := AI.Value ;
ELSIF NOT AI.WorkingMode3 THEN
    AI.Value              := AI.Output;
END_IF;

//Manual & suppression modes
IF AI.WorkingMode1 AND NOT AI.Bit._01 THEN AI.Register._02 := AI.Register._02 + 1; AI.Acknowledgment := True ; END_IF;
IF AI.WorkingMode3 AND NOT AI.Bit._03 THEN AI.Register._01 := AI.Register._01 + 1; END_IF;

IF AI.Input >= 32512                       THEN AI.Fault_01 := True; END_IF;
IF AI.Input >= 27649 AND AI.Input <= 32511 THEN AI.Fault_02 := True; END_IF;
IF AI.Input <= -1    AND AI.Input >= -4864 THEN AI.Fault_03 := True; END_IF;
IF AI.Input <= -4865                       THEN AI.Fault_04 := True; END_IF;
AI.Fault_05 := False;
IF AI.Setting._04 - AI.Setting._03 <= 0 OR ABS(AI.Setting._06 - AI.Setting._05) <= 0 THEN AI.Fault_06 := True; END_IF;
AI.Fault_07 := False;

//Summing main faults : 00
IF (AI.Fault_01 OR AI.Fault_04 OR AI.Fault_05 OR AI.Fault_06 OR AI.Fault_07) AND NOT (AI.WorkingMode0 OR AI.WorkingMode1 OR AI.WorkingMode3) THEN
    IF PostiveEdge100ms THEN AI.Setting.Buffer._00 := AI.Setting.Buffer._00 + 1 ; END_IF;
    IF AI.Setting.Buffer._00 >= AI.Setting._01 THEN AI.Fault_00 := True ; END_IF;
    IF AI.Fault_00 AND NOT AI.Bit._00 THEN AI.Register._00 := AI.Register._00 + 1; END_IF;
ELSE
    AI.Acknowledged       := False;
    AI.Setting.Buffer._00 := 0;
END_IF;


//Access levels monitoring
IF AI.AccessLevel._03 > 9999                THEN AI.AccessLevel._03 := 9999; END_IF;
IF AI.AccessLevel._03 < AI.AccessLevel._02  THEN AI.AccessLevel._03 := AI.AccessLevel._02 + 1; END_IF;
IF AI.AccessLevel._02 < AI.AccessLevel._01  THEN AI.AccessLevel._02 := AI.AccessLevel._01 + 1; END_IF;
IF AI.AccessLevel._01 < AI.AccessLevel._00  THEN AI.AccessLevel._01 := AI.AccessLevel._00 + 1; END_IF;
IF AI.AccessLevel._00 < 0                   THEN AI.AccessLevel._00 := 0; END_IF;

//Edgging
AI.Bit._00 := AI.Fault_00 ;     //Sum of object faults
AI.Bit._01 := AI.WorkingMode1 ; //Mode suppression
AI.Bit._03 := AI.WorkingMode3 ; //Mode manual

//Calulating number of forced, inhibited and in fault elements [Legacy]
IF AI.WorkingMode3   THEN "DB_SCADA".AIForc  := "DB_SCADA".AIForc  + 1 ; END_IF;
IF AI.WorkingMode1   THEN "DB_SCADA".AIInhib := "DB_SCADA".AIInhib + 1 ; END_IF;
IF AI.Fault_00       THEN "DB_SCADA".AIFault := "DB_SCADA".AIFault + 1 ; END_IF;

//Resetting Acknowledgment
IF Ack AND NOT (AI.WorkingMode0 OR AI.WorkingMode1) THEN AI.Acknowledgment:=FALSE; END_IF;

END_FUNCTION
 

