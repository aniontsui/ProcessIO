FUNCTION FC1093 : VOID
NAME    : 'FC_AI'
AUTHOR  : 'YACINEAA'
FAMILY  : 'AI'
VERSION : '1.5'


//GNU General Public License v3.0
//--------------------------------------------------------------------------------------------------------------------------------------
//-- Object         Management of Analog input (AI)
//-- Type           Function
//-- Version        1
//--------------------------------------------------------------------------------------------------------------------------------------
//--Author          Yacine A.A.
//--Organization    2020 COPAG, Industrial project management office, Department of operational technology / Taroudant, Morocco          
//--Description     This block takes care of handling for analog input objects, this is in particular:
//                      - The activation of the Internal Status in the different modes.
//                      - Scaling OF raw Input value into physical engineering units.
//                      - Filter on raw input.
//                      - Limitation of output value.
//                      - Faults handling.
//-----------------------------------------------------------------------------------------------------------------
//--History
//--[Version]            [Name]                        [DATE]                    [Comments]
//--1.00                 Yacine AA                     15-01-21                  Creation
//--1.50                 Yacine AA                     07-02-21                  Replacing STRUCT with ARRAY to gain memrory space  
//--------------------------------------------------------------------------------------------------------------------------------------
//-----ToDo
//-- Calculate Hardware fault via module diagnostic 
//-- 
//---
//---
//--------------------------------------------------------------------------------------------------------------------------------------
//-----HELP
//----TypeID : 
//--- 0 : 
//--- 1 : 
//--- 3 : 
//--- 2 : 
//----ARRAYS : 
// Setting_00 : INT : ID type of the object (see function help)
// Setting_01 : INT : Grace period before fault [100ms]
// Setting_02 : INT  : Spare integer
// Setting_03 : INT  : Analog input minimum raw value
// Setting_04 : INT  : Analog input maximum raw value
// Setting_05 : REAL : Engineering units output minimum Value [EU]
// Setting_06 : REAL : Engineering units output maximum Value [EU]
// Setting_07 : REAL : Time interval for filter period [s]
// Setting_08 : REAL : Spare setting
// Buffer_00 : INT : Grace period before fault [100ms]
// Buffer_01 : REAL : Old physical value in engineering unit [EU]       
// Register_00 : INT : Fault counter
// Register_01 : INT : Manual mode counter
// Register_02 : INT : Suppression mode counter
// Register_03 : INT : Spare register
// AccessLevel_00 : INT : Access level 0 : for manual main operation
// AccessLevel_01 : INT : Access level 1 : for suppression mode 
// AccessLevel_02 : INT : Access level 2 : for setting
// AccessLevel_03 : INT : Access level 3 : for advanced setting



VAR_IN_OUT
    AI                      : UDT_AI ; //Standerd user data type for Analog inputs AI
END_VAR

VAR_TEMP
    PostiveEdge100ms        : BOOL ; //Positive edge for 100ms (10Hz) 
    PostiveEdge1s           : BOOL ; //Positive edge for 1s (1Hz) 
    Acknowledgment          : BOOL ; //Acknowledgment for zone
    Simulation              : BOOL ; //Simulation mode in zone
    Ack                     : BOOL ; //Acknowledgment temporary working bit 
    ExpRate                 : REAL ; // Equals exp(-Sample_T / F_tau)
END_VAR 



BEGIN

//Loading utilities
PostiveEdge100ms   := "Frm_100ms" ;
PostiveEdge1s      := "Frm_1s" ; 
Acknowledgment     := "DB_COM_HMI".ACQ_DE_HMI_MEM ;
Simulation         := "MODE_SIM" ; 

//Simulation = Zone Simulation or element Simulation
AI.WorkingMode0 := Simulation OR "DB_SCADA".SimulationMode_0 ;

//Acknowledgment = Zone acknowledgment or element acknowledgment
Ack := AI.Acknowledgment OR Acknowledgment;

//Resetting faults
IF Ack THEN
    AI.Fault_00     := False;
    AI.Fault_01     := False;
    AI.Fault_02     := False;
    AI.Fault_03     := False;
    AI.Fault_04     := False;
    AI.Fault_05     := False;
    AI.Fault_06     := False;
    AI.Fault_07     := False;
    AI.Acknowledged := True;
END_IF;

//Deny suppression modes
IF AI.WorkingMode2  THEN 
    AI.WorkingMode1 := False; 
    AI.WorkingMode4 := True;
END_IF;

//Deny manual modes
IF AI.WorkingMode4  THEN AI.WorkingMode3 := False; END_IF;

//Scalling  
IF AI.SettingInt[4] > AI.SettingInt[3] THEN  
    AI.Output := AI.SettingReal[5] + (((AI.Input - AI.SettingInt[3])*(AI.SettingReal[6] - AI.SettingReal[5]))/(AI.SettingInt[4] - AI.SettingInt[3]));
END_IF;        

//Limitting
IF AI.WorkingMode5 THEN
    IF AI.Output > AI.SettingReal[6] THEN
        IF AI.SettingReal[6] > AI.SettingReal[5] THEN AI.Output :=  AI.SettingReal[6]; END_IF;
        IF AI.SettingReal[6] < AI.SettingReal[5] THEN AI.Output :=  AI.SettingReal[5]; END_IF;
    END_IF;
    IF AI.Output < AI.SettingReal[5] THEN
        IF AI.SettingReal[6] > AI.SettingReal[5] THEN AI.Output :=  AI.SettingReal[5]; END_IF;
        IF AI.SettingReal[6] < AI.SettingReal[5] THEN AI.Output :=  AI.SettingReal[6]; END_IF;
    END_IF;
END_IF;   

//Filterring & assignment of value
IF AI.SettingReal[7] > 0.0 AND "DB_SCADA".PrevCycle > 0.0 AND NOT AI.WorkingMode3 THEN
    ExpRate               := EXP(- "DB_SCADA".PrevCycle / AI.SettingReal[7] );
    AI.Value              := AI.Buffer_01 * ExpRate + (AI.Output  * (1 - ExpRate));
    AI.Buffer_01 := AI.Value ;
ELSIF NOT AI.WorkingMode3 THEN
    AI.Value              := AI.Output;
END_IF;

//Manual & suppression modes
IF AI.WorkingMode1 AND NOT AI.Bit[1] THEN AI.Register[2] := AI.Register[2] + 1; AI.Acknowledgment := True ; END_IF;
IF AI.WorkingMode3 AND NOT AI.Bit[3] THEN AI.Register[1] := AI.Register[1] + 1; END_IF;

IF AI.Input >= 32512                       THEN AI.Fault_01 := True; END_IF;
IF AI.Input >= 27649 AND AI.Input <= 32511 THEN AI.Fault_02 := True; END_IF;
IF AI.Input <= -1    AND AI.Input >= -4864 THEN AI.Fault_03 := True; END_IF;
IF AI.Input <= -4865                       THEN AI.Fault_04 := True; END_IF;
AI.Fault_05 := False;
IF AI.SettingInt[4] - AI.SettingInt[3] <= 0 OR ABS(AI.SettingReal[6] - AI.SettingReal[5]) <= 0 THEN AI.Fault_06 := True; END_IF;
AI.Fault_07 := False;

//Summing main faults : 00
IF (AI.Fault_01 OR AI.Fault_02 OR AI.Fault_03 OR AI.Fault_04 OR AI.Fault_05 OR AI.Fault_06 OR AI.Fault_07) AND NOT (AI.WorkingMode0 OR AI.WorkingMode1 OR AI.WorkingMode3) THEN
    IF PostiveEdge100ms THEN AI.Buffer_00 := AI.Buffer_00 + 1 ; END_IF;
    IF AI.Buffer_00 >= AI.SettingInt[1] THEN AI.Fault_00 := True ; END_IF;
    IF AI.Fault_00 AND NOT AI.Bit[0] THEN AI.Register[0] := AI.Register[0] + 1; END_IF;
ELSE
    AI.Acknowledged       := False;
    AI.Buffer_00 := 0;
END_IF;


//Access levels monitoring
IF AI.AccessLevel[3] > 9999                THEN AI.AccessLevel[3] := 9999; END_IF;
IF AI.AccessLevel[3] < AI.AccessLevel[2]  THEN AI.AccessLevel[3] := AI.AccessLevel[2] + 1; END_IF;
IF AI.AccessLevel[2] < AI.AccessLevel[1]  THEN AI.AccessLevel[2] := AI.AccessLevel[1] + 1; END_IF;
IF AI.AccessLevel[1] < AI.AccessLevel[0]  THEN AI.AccessLevel[1] := AI.AccessLevel[0] + 1; END_IF;
IF AI.AccessLevel[0] < 0                   THEN AI.AccessLevel[0] := 0; END_IF;

//Edgging
AI.Bit[0] := AI.Fault_00 ;     //Sum of object faults
AI.Bit[1] := AI.WorkingMode1 ; //Mode suppression
AI.Bit[3] := AI.WorkingMode3 ; //Mode manual

//Calulating number of forced, inhibited and in fault elements [Legacy]
IF AI.WorkingMode3   THEN "DB_SCADA".AIForc  := "DB_SCADA".AIForc  + 1 ; END_IF;
IF AI.WorkingMode1   THEN "DB_SCADA".AIInhib := "DB_SCADA".AIInhib + 1 ; END_IF;
IF AI.Fault_00       THEN "DB_SCADA".AIFault := "DB_SCADA".AIFault + 1 ; END_IF;

//Resetting Acknowledgment
IF Ack AND NOT (AI.WorkingMode0 OR AI.WorkingMode1) THEN AI.Acknowledgment:=FALSE; END_IF;

END_FUNCTION
 

