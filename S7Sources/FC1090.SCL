FUNCTION FC1090 : VOID
NAME    : 'FC_XV'
AUTHOR  : 'YACINEAA'
FAMILY  : 'XV'
VERSION : '1.5'


//GNU General Public License v3.0
//-------------------------------------------------------------------------------------------------------------------------------------
//-- Object         Management of valves (XV)
//-- Type           Function
//-- Version        1
//-------------------------------------------------------------------------------------------------------------------------------------
//--Author          Yacine A.A.
//--Organization    2020 COPAG, Industrial project management office, Department of operational technology / Taroudant, Morocco         
//--Description     This block takes care of object handling for valve objects :
//                      - The activation of the object in the different modes.
//                      - The monitoring of the feedbacks.
//                      - Turn-on delay and Turn-off delay of the object.
//                      - Interlocking the object
//                      - Interlocking the manual mode of the object      
//                      - Mask object errors.
//-----------------------------------------------------------------------------------------------------------------
//--History
//--[Version]         [Name]                        [DATE]                    [Comments]
//--1.00              Yacine AA                     25-08-20                  Creation
//--1.10              Yacine AA                     08-09-20                  Donwsizing the UDT to 64k
//--1.20              Yacine AA                     25-09-20                  Adaptting with WW logic
//--1.30              Yacine AA                     27-12-20                  Standardizing UDT naming and adding manual mode counter 
//--1.50              Yacine AA                     07-02-21                  Replacing STRUCT with ARRAY to gain memrory space  
//-------------------------------------------------------------------------------------------------------------------------------------
//-----ToDo
//-- Animation seat-lifts faults
//-- Animation rebounding fault
//---
//---
//-------------------------------------------------------------------------------------------------------------------------------------
//-----HELP
// Type ID : 
// 0 : solenoid valve : Vavle with solenoid and no feedback [e.g. Bürkert 2000]
// 1 : simple valve : Shut off or change over valve equipped with one solenoid and 2 feedbacks [e.g. Definox DCX4 or Alfalaval SSV]
// 2 : mixproof vavle : Mixproof valve with plug and 2 feedbacks and 2 seats with feedback [e.g. Definox VEOX, Alafalaval Unique Mixproof]
// 3 : mixproff valve : Mixproof valve with plug and 2 feedbacks and 2 seats without feedback [e.g. Definox VEOX]
// 4 : simple valve with leak chamber : Double sealing shut-off valve with one plug and 2 feedbacks and one solenoid for laek [e.g. Definox DCX3-DE]
// 5 : simple valve with leak chamber and washing valve : Double sealing shut-off valve with one plug and 2 feedbacks and one solenoid for laek and its cleaning vavle [e.g. Definox DCX4-DE]
//-----ARRAYS
// Setting[00] : INT  : ID type of the valve (see function help)
// Setting[01] : INT  : Maximum number of activation cycles before preventive maintenance fault
// Setting[02] : INT  : Grace period before fault when deenergizing main [100ms]
// Setting[03] : INT  : Grace period before fault when energizing main [100ms]
// Setting[04] : INT  : Grace period before fault for main valve reboundding  [100ms]
// Setting[05] : INT  : Grace period before fault when energizing upper seat [100ms]
// Setting[06] : INT  : Grace period before fault when energizing lower seat [100ms]
// Setting[07] : INT  : Delay before de-energizing main [100ms]
// Setting[08] : INT  : Delay before energizing main [100ms]
//
// Buffer[00] : INT : Grace period before fault when energizing/de-energizing main [100ms]
// Buffer[01] : INT : Grace period before fault for main valve reboundding  [100ms]
// Buffer[02] : INT : Grace period before fault for main valve hardware  [100ms]
// Buffer[03] : INT : Grace period before fault when energizing/de-energizing upper seat [100ms]
// Buffer[04] : INT : Grace period before fault when energizing/de-energizing lower seat [100ms]
// Buffer[05] : INT : Delay before energizing/de-energizing main [100ms]
// 
// Register[00] : REAL : Main operating time [h]
// Register[01] : INT : Main cycle counter
// Register[02] : INT ; Upper seat-lift or leak chamber cycle counter
// Register[03] : INT ; Lower seat-lift or washing valve cycle counter
// Register[04] : INT ; Main fault counter
// Register[05] : INT ; Manual mode counter
// Register[06] : INT ; Upper/Lower seat-lift fault counter
//   
// AccessLevel[00] : INT : Access level 0 : for manual main operation
// AccessLevel[01] : INT : Access level 1 : for suppression mode and upper/lower seats manual
// AccessLevel[02] : INT : Access level 2 : for setting
// AccessLevel[03] : INT : Access level 3 : for advanced setting


VAR_IN_OUT
    XV                      : UDT_XV ; //Standerd user data type for valves XV
END_VAR

VAR_TEMP
    Ack                     : BOOL ; //Acknowledgment temporary working bit 
    PostiveEdge100ms        : BOOL ; //Positive edge for 100ms (10Hz) 
    PostiveEdge1s           : BOOL ; //Positive edge for 1s (1Hz) 
    Acknowledgment          : BOOL ; //Acknowledgment for valve zone
    Simulation              : BOOL ; //Simulation mode in valve zone
END_VAR 



BEGIN

//Loading utilities
PostiveEdge100ms   := "Frm_100ms" ;
PostiveEdge1s      := "Frm_1s" ; 
Acknowledgment     := "DB_COM_HMI".ACQ_DE_HMI_MEM ;
Simulation         := "MODE_SIM" ; 

//Simulation = Zone Simulation or element Simulation
XV.WorkinMode0 := Simulation OR "DB_SCADA".SimulationMode_0 ;

//Acknowledgment = Zone acknowledgment or element acknowledgment
Ack := XV.Acknowledgment OR Acknowledgment;

//Resetting faults
IF Ack THEN
    XV.Fault_00     := False;
    XV.Fault_01     := False;
    XV.Fault_02     := False;
    XV.Fault_03     := False;
    XV.Fault_04     := False;
    XV.Fault_05     := False;
    XV.Fault_06     := False;
    XV.Fault_07     := False;
    XV.Acknowledged := True;
END_IF;

//Prohibiting manual mode
IF XV.WorkinMode5  THEN 
    XV.WorkinMode3  := False; 
    XV.ForceOutput0 := False; 
    XV.ForceOutput1 := False;
    XV.ForceOutput2 := False;
    XV.ForceOutput3 := False;
END_IF; 

//Delayed control (only for anaimation)
XV.WorkinMode6 := (XV.Setting[7] > 0.0 OR XV.Setting[8] > 0.0 ) ;

//Main inputs animation 
IF (XV.Setting[0] = 0) OR XV.WorkinMode0 OR XV.WorkinMode1 THEN 
    IF NOT XV.WorkinMode4 THEN
        XV.Feedback0 := NOT XV.Output0;
        XV.Feedback1 :=     XV.Output0;
    ELSE
        XV.Feedback0 :=     XV.Output0;
        XV.Feedback1 := NOT XV.Output0;
    END_IF;
    IF NOT XV.Edge[8] THEN XV.Acknowledgment := True ; END_IF;
ELSE
    IF NOT XV.WorkinMode4 THEN
        XV.Feedback0 :=     XV.IOFeedback0;
        XV.Feedback1 :=     XV.IOFeedback1;
    ELSE
        XV.Feedback0 :=     XV.IOFeedback1;
        XV.Feedback1 :=     XV.IOFeedback0;
    END_IF;
END_IF;

//Positions established
XV.Bit[0]  := (XV.Output0 AND  XV.Feedback1  AND NOT XV.Feedback0) OR ((NOT XV.Output0) AND XV.Feedback0 AND NOT XV.Feedback1 ) ;
XV.Bit[1]  := (XV.Output1 AND  XV.Feedback2) OR (NOT XV.Output1 AND NOT XV.Feedback2) ;
XV.Bit[2]  := (XV.Output2 AND  XV.Feedback3) OR (NOT XV.Output2 AND NOT XV.Feedback3) ;

//Resetting grace temporary timers
IF XV.Bit[0] AND NOT XV.Edge[0] THEN 
    XV.Buffer[0]  := 0;
    XV.Buffer[1]  := 0;
    XV.Buffer[2]  := 0;
END_IF;
IF XV.Bit[1] AND NOT XV.Edge[1] THEN 
    XV.Buffer[3]  := 0;
END_IF;
IF XV.Bit[2] AND NOT XV.Edge[2] THEN 
    XV.Buffer[4]  := 0;
END_IF;

//Secondary inputs animation  
IF (XV.Setting[0] < 2 OR XV.Setting[0] > 3)  OR XV.WorkinMode0 OR XV.WorkinMode2 THEN 
    XV.Feedback2 := XV.Output1;
    XV.Feedback3 := XV.Output2;
ELSE
    XV.Feedback2 := XV.IOFeedback2;
    XV.Feedback3 := XV.IOFeedback3;
END_IF;

//Activation order to outputs 
XV.Bit[10]   :=  (NOT XV.WorkinMode3 AND XV.AutoOutput0) OR (XV.WorkinMode3 AND XV.ForceOutput0) ;
XV.Bit[11]   :=  (NOT XV.WorkinMode3 AND XV.AutoOutput1) OR (XV.WorkinMode3 AND XV.ForceOutput1) ;
XV.Bit[12]   :=  (NOT XV.WorkinMode3 AND XV.AutoOutput2) OR (XV.WorkinMode3 AND XV.ForceOutput2) ;
XV.Bit[13]   :=  False ;

//Management of outputs according to valve type
CASE XV.Setting[0] OF
    0,1: // 0 : solenoid valve , 1 : simple valve
        XV.Bit[11] := False;
        XV.Bit[12] := False;
        XV.Bit[13] := False;
    2,3: // 2-3 : mixproof vavle 
        IF XV.Bit[10] THEN 
            XV.Bit[11] := False;
            XV.Bit[12] := False;
            XV.Bit[13] := False;
        END_IF;
        IF XV.Bit[11] THEN XV.Bit[12] := False; END_IF;
        IF XV.Bit[12] THEN XV.Bit[11] := False; END_IF;
    4: // 4 : simple valve with leak chamber 
        XV.Bit[12] := False;
END_CASE;

//Writting output 0
IF XV.Bit[10] THEN
    IF NOT XV.Edge[10] THEN 
        XV.Buffer[0]  := 0;
        XV.Buffer[1]  := 0;
        XV.Buffer[2]  := 0;
        XV.Buffer[5]  := 0 ;
        XV.Register[1]        := XV.Register[1] + 1; //counting energizing cycles
    END_IF;
    IF PostiveEdge100ms AND XV.Buffer[5] < XV.Setting[8]    THEN XV.Buffer[5] := XV.Buffer[5] + 1; END_IF;
    IF XV.Buffer[5] >= XV.Setting[8] OR XV.Setting[8] <= 0  THEN XV.Output0 := XV.Bit[10]; END_IF;
ELSE
    IF  XV.Edge[10] THEN 
        XV.Buffer[5]     := 0 ; 
        XV.Buffer[0]     := 0;
        XV.Buffer[1]  := 0;
        XV.Buffer[2]  := 0;
    END_IF;
    IF PostiveEdge100ms AND XV.Buffer[5] < XV.Setting[7]   THEN XV.Buffer[5] := XV.Buffer[5] + 1; END_IF;
    IF XV.Buffer[5] >= XV.Setting[7] OR XV.Setting[7] <= 0 THEN XV.Output0 := XV.Bit[10]; END_IF;
END_IF; 

//Writting output 1-2-3
XV.Output1 := XV.Bit[11] ;
XV.Output2 := XV.Bit[12] ;
XV.Output3 := XV.Bit[13] ;
IF XV.Bit[11] AND NOT XV.Edge[11] THEN 
    XV.Register[2] := XV.Register[2] + 1; //Upper seat-lift or leak chamber cycle counter
END_IF;
IF XV.Bit[12] AND NOT XV.Edge[12] THEN 
    XV.Register[3] := XV.Register[3] + 1; //Lower seat-lift or washing valve cycle counter
END_IF;

//Main manual counter
IF XV.WorkinMode3 AND NOT XV.Edge[7] THEN 
    XV.Register[5] := XV.Register[5] + 1 ;
END_IF;
   
//Upper/Lower seat lift fault counter
IF (XV.Fault_01 OR XV.Fault_02) AND NOT XV.Edge[15] THEN 
    XV.Register[6] := XV.Register[6] + 1 ;
END_IF;  

//Main valve position not established yet : 03/04 Main activation/desactivation fault
IF NOT XV.Bit[0] THEN
    IF PostiveEdge100ms THEN XV.Buffer[0] := XV.Buffer[0] + 1 ; END_IF;
    XV.Fault_03 := XV.Buffer[0] > XV.Setting[3] AND     XV.Bit[10];  
    XV.Fault_04 := XV.Buffer[0] > XV.Setting[2] AND NOT XV.Bit[10];      
END_IF;

//Main hardware fault : 04 Main Hardware fault (Both feedbacks on)
IF XV.Feedback0 AND XV.Feedback1 THEN
    IF PostiveEdge100ms THEN XV.Buffer[2] := XV.Buffer[2] + 1 ; END_IF;
    XV.Fault_05 := XV.Buffer[2] > 10 ;
END_IF;

//Calculating faults : 07 Main maximum number of activation cycles reached
IF XV.Register[1] >= XV.Setting[1]  THEN
    XV.Fault_07 := True ;
END_IF;

//Summing main faults : 00
IF XV.Fault_03 OR XV.Fault_04 OR XV.Fault_05 OR XV.Fault_06 THEN
    XV.Fault_00 := True ;
ELSE
    XV.Acknowledged := False;
END_IF;

//Main fault counter
IF XV.Fault_00 AND NOT XV.Edge[9] THEN 
    XV.Register[4] := XV.Register[4] + 1 ; //Main fault counter
END_IF; 

//Access levels monitoring
IF XV.AccessLevel[3] > 9999               THEN XV.AccessLevel[3] := 9999; END_IF;
IF XV.AccessLevel[3] < XV.AccessLevel[2]  THEN XV.AccessLevel[3] := XV.AccessLevel[2] + 1; END_IF;
IF XV.AccessLevel[2] < XV.AccessLevel[1]  THEN XV.AccessLevel[2] := XV.AccessLevel[1] + 1; END_IF;
IF XV.AccessLevel[1] < XV.AccessLevel[0]  THEN XV.AccessLevel[1] := XV.AccessLevel[0] + 1; END_IF;
IF XV.AccessLevel[0] < 0                  THEN XV.AccessLevel[0] := 0; END_IF;


//Edgging
XV.Edge[0] := XV.Bit[0] ; //Positive edge position of main valve established
XV.Edge[1] := XV.Bit[1] ; //Positif edge for position of upper seat lift established
XV.Edge[2] := XV.Bit[2] ; //Positive edge position of main valve established

XV.Edge[7] := XV.WorkinMode3 ; //Positive edge for manuel mode

XV.Edge[8] := XV.WorkinMode0 OR XV.WorkinMode1 OR (XV.Setting[0] = 0) ; //Positive edge for inhibition
XV.Edge[9] := XV.Fault_00 ; 
XV.Edge[10] := XV.Bit[10] ; 
XV.Edge[11] := XV.Bit[11] ;
XV.Edge[12] := XV.Bit[12] ;
XV.Edge[13] := XV.Bit[13] ;

XV.Edge[15] := XV.Fault_01 OR XV.Fault_02 ;

//Main operating time [h]
IF PostiveEdge1s AND XV.Output0 THEN 
    XV.Register_00 := XV.Register_00 + (1.0/3600.0); 
END_IF;

//Calulating number of forced, inhibited and in fault elements [Legacy]
IF XV.WorkinMode3    THEN "DB_SCADA".XVForc  := "DB_SCADA".XVForc  + 1 ; END_IF;
IF XV.WorkinMode1    THEN "DB_SCADA".XVInhib := "DB_SCADA".XVInhib + 1 ; END_IF;
IF XV.Fault_00       THEN "DB_SCADA".XVFault := "DB_SCADA".XVFault + 1 ; END_IF;

//Resetting Acknowledgment
IF XV.Acknowledgment AND NOT (XV.WorkinMode0 OR XV.WorkinMode1 OR (XV.Setting[0] = 0)) THEN XV.Acknowledgment:=FALSE; END_IF;


END_FUNCTION
 

