FUNCTION FC1091 : VOID
NAME    : 'FC_MM'
AUTHOR  : 'YACINEAA'
FAMILY  : 'MM'
VERSION : '1.5'


//GNU General Public License v3.0
//--------------------------------------------------------------------------------------------------------------------------------------
//-- Object         Management of motors (MM)
//-- Type           Function
//-- Version        1
//--------------------------------------------------------------------------------------------------------------------------------------
//--Author          Yacine A.A.
//--Organization    2020 COPAG, Industrial project management office, Department of operational technology / Taroudant, Morocco         
//--Description     This block takes care of object handling for Motor objects. This is in particular:
//                      - The activation of the object in the different modes.
//                      - The monitoring of the feedbacks.
//                      - Turn-on delay and Turn-off delay of the object.
//                      - Interlocking the object      
//                      - Interlocking the manual mode of the object      
//                      - Mask object errors.
//-----------------------------------------------------------------------------------------------------------------
//--History
//--[Version]            [Name]                        [DATE]                    [Comments]
//--1.00                 Yacine AA                     08-10-20                  Creation
//--1.10                 Yacine AA                     08-12-20                  Test with WW
//--1.20                 Yacine AA                     02-01-21                  Standardizing UDT naming and adding manual mode counter
//--1.50              Yacine AA                     07-02-21                  Replacing STRUCT with ARRAY to gain memrory space  
//--------------------------------------------------------------------------------------------------------------------------------------
//-----ToDo
//-- Motor rebounding fault
//-- 
//---
//---
//--------------------------------------------------------------------------------------------------------------------------------------
//-----HELP
//----TypeID : 
//--- 0 : Simple motor with one direction
//--- 1 : Simple motor with two directions
//--- 2 : 
// Setting_00 : INT  : ID type of motor object 
// Setting_01 : INT  : Maximum operating time before preventive maintenance [h]
// Setting_02 : INT  : Grace period before fault when stopping motor [100ms]
// Setting_03 : INT  : Grace period before fault when starting motor [100ms]
// Setting_04 : INT  : Grace period before reboundding fault [100ms]
// Setting_05 : INT  : Grace period before overload fault [100ms]
// Setting_06 : INT  : Grace period before VFR not ready fault [100ms]
// Setting_07 : INT  : Delay before stopping motor [100ms]
// Setting_08 : INT  : Delay before starting motor [100ms]
//
//-----ARRAYS
// Buffer_00 : INT : Grace period before fault when stopping/starting motor [100ms]
// Buffer_01 : INT : Grace period before rebound fault [100ms]
// Buffer_02 : INT : Grace period before overload fault [100ms]
// Buffer_03 : INT : Grace period before VFR not ready fault [100ms]
// Buffer_04 : INT : Delay before start/stop [100ms]
// Buffer_05 : INT : Spare
// Register_00 : REAL : Motor operating time [h]
// Register_01// : INT : Motor Forward cycle counter
// Register_02 : INT : Motor Reverse cycle counter
// Register_03 : INT : Manual mode counter
// Register_04 : INT : Start/Stop fault counter
// Register_05 : INT : Overload fault counter
// Register_06 : INT : VFD fault counter
// AccessLevel_00 : INT : Access level 0 : for manual operation
// AccessLevel_01 : INT : Access level 1 : for inhibition mode 
// AccessLevel_02 : INT : Access level 2 : for setting level 
// AccessLevel_03 : INT : Access level 3 : for advenced setting level 



VAR_IN_OUT
    MM                      : UDT_MM ; //Standerd user data type for motors MM
END_VAR

VAR_TEMP
    Ack                     : BOOL ; //Acknowledgment temporary working bit 
    PostiveEdge100ms        : BOOL ; //Positive edge for 100ms (10Hz) 
    PostiveEdge1s           : BOOL ; //Positive edge for 1s (1Hz) 
    Acknowledgment          : BOOL ; //Acknowledgment for motor zone
    Simulation              : BOOL ; //Simulation mode in motor zone
END_VAR 



BEGIN

//Loading utilities
PostiveEdge100ms   := "Frm_100ms" ;
PostiveEdge1s      := "Frm_1s" ; 
Acknowledgment     := "DB_COM_HMI".ACQ_DE_HMI_MEM ;
Simulation         := "MODE_SIM" ; 

//Simulation = Zone Simulation or element Simulation
MM.WorkinMode0 := Simulation OR "DB_SCADA".SimulationMode_0 ;

//Acknowledgment = Zone acknowledgment or element acknowledgment
Ack := MM.Acknowledgment OR Acknowledgment;
//Resetting faults
IF Ack THEN
    MM.Fault_00     := False;
    MM.Fault_01     := False;
    MM.Fault_02     := False;
    MM.Fault_03     := False;
    MM.Fault_04     := False;
    MM.Fault_05     := False;
    MM.Fault_06     := False;
    MM.Fault_07     := False;
    MM.Acknowledged := True;
END_IF;

//Prohibiting manual mode
IF MM.WorkinMode5  THEN MM.WorkinMode3 := FALSE; MM.ForceOutput0 := False; END_IF;
IF MM.WorkinMode6  THEN MM.WorkinMode3 := FALSE; MM.ForceOutput1 := False; END_IF;

//Main inputs animation 
IF MM.WorkinMode0 OR MM.WorkinMode1 THEN 
    MM.Feedback0 := MM.Output0;
    MM.Feedback1 := True ;
    MM.Feedback2 := True ;
    MM.Feedback3 := True ;
    IF NOT MM.Edge[8] THEN MM.Acknowledgment := True ; END_IF;
ELSE
    MM.Feedback0 := MM.IOFeedback0;
    MM.Feedback1 := MM.IOFeedback1;
    MM.Feedback2 := MM.IOFeedback2;
    MM.Feedback3 := MM.IOFeedback3;
END_IF;

//Mode(start/stop) established
MM.Bit[0]  := (MM.Output0 AND  MM.Feedback0) OR (NOT MM.Output0 AND NOT MM.Feedback0) ;
MM.Bit[1]  := (MM.Output1 AND  MM.Feedback0) OR (NOT MM.Output1 AND NOT MM.Feedback0) ;


//Resetting grace temporary timers
IF (MM.Bit[0] AND NOT MM.Edge[0]) OR (MM.Bit[1] AND NOT MM.Edge[1])THEN 
    MM.Buffer[0]  := 0;
    MM.Buffer[1]  := 0;
END_IF;


//Activation order to outputs 
MM.Bit[10]   :=  (NOT MM.WorkinMode3 AND MM.AutoOutput0) OR (MM.WorkinMode3 AND MM.ForceOutput0) ;
MM.Bit[11]   :=  (NOT MM.WorkinMode3 AND MM.AutoOutput1) OR (MM.WorkinMode3 AND MM.ForceOutput1) ;
MM.Bit[12]   :=  MM.AutoOutput2 ;
MM.Bit[13]   :=  False ;

//Management of outputs 
IF MM.Bit[10] THEN MM.Bit[11] := False; END_IF;
IF MM.Bit[11] THEN MM.Bit[10] := False; END_IF;
IF MM.Bit[12] THEN MM.Bit[10] := False; MM.Bit[11] := False; END_IF;      

//Writting output 0
IF MM.Bit[10] THEN
    IF NOT MM.Edge[10] THEN 
        MM.Buffer[0] := 0;
        MM.Buffer[1] := 0;
        MM.Buffer[4] := 0;
        MM.Register[1]       := MM.Register[1] + 1;
    END_IF;
    IF PostiveEdge100ms AND MM.Buffer[4] < MM.Setting[8]   THEN MM.Buffer[4] := MM.Buffer[4] + 1; END_IF;
    IF MM.Buffer[4] >= MM.Setting[8] OR MM.Setting[8] <= 0 THEN MM.Output0 := MM.Bit[10]; END_IF;
ELSE
    IF  MM.Edge[10] THEN 
        MM.Buffer[0] := 0 ; 
        MM.Buffer[1] := 0;
        MM.Buffer[4] := 0;
    END_IF;
    IF PostiveEdge100ms AND MM.Buffer[4] < MM.Setting[7]   THEN MM.Buffer[4] := MM.Buffer[4] + 1; END_IF;
    IF MM.Buffer[4] >= MM.Setting[7] OR MM.Setting[7] <= 0 THEN MM.Output0 := MM.Bit[10]; END_IF;
END_IF; 

//Writting output 1
IF MM.Bit[11] THEN
    IF NOT MM.Edge[11] THEN 
        MM.Buffer[0] := 0;
        MM.Buffer[1] := 0;
        MM.Buffer[4] := 0;
        MM.Register[2]  := MM.Register[2] + 1;
    END_IF;
    IF PostiveEdge100ms AND MM.Buffer[4] < MM.Setting[8] THEN MM.Buffer[4] := MM.Buffer[4] + 1; END_IF;
    IF MM.Buffer[4] >= MM.Setting[8] OR MM.Setting[8] <= 0 THEN MM.Output1 := MM.Bit[11]; END_IF;
ELSE
    IF  MM.Edge[11] THEN 
        MM.Buffer[0] := 0; 
        MM.Buffer[1] := 0;
        MM.Buffer[4] := 0;
    END_IF;
    IF PostiveEdge100ms AND MM.Buffer[4] < MM.Setting[7]   THEN MM.Buffer[4] := MM.Buffer[4] + 1; END_IF;
    IF MM.Buffer[4] >= MM.Setting[7] OR MM.Setting[7] <= 0 THEN MM.Output1 := MM.Bit[11]; END_IF;
END_IF; 

//Writting output 2-3
MM.Output2 := NOT MM.Bit[12] ;
MM.Output3 := MM.Bit[13] ;

//Motor forward running fault : 01/02
IF NOT MM.Bit[0] THEN
    IF PostiveEdge100ms THEN MM.Buffer[0] := MM.Buffer[0] + 1 ; END_IF;
    MM.Fault_01 := MM.Buffer[0] > MM.Setting[3] AND     MM.Bit[10] ;  
    MM.Fault_02 := MM.Buffer[0] > MM.Setting[2]  AND NOT MM.Bit[10] ;      
END_IF;

//Motor reverse running fault : 01/02
IF MM.WorkinMode2 AND NOT MM.Bit[1] THEN
    IF PostiveEdge100ms THEN MM.Buffer[0] := MM.Buffer[0] + 1 ; END_IF;
    MM.Fault_01 := MM.Buffer[0] > MM.Setting[3] AND     MM.Bit[11] ;  
    MM.Fault_02 := MM.Buffer[0] > MM.Setting[2]  AND NOT MM.Bit[11] ;      
END_IF;

//Motor overload fault : 03
IF NOT MM.Feedback1 THEN
    IF PostiveEdge100ms THEN MM.Buffer[2] := MM.Buffer[2] + 1 ; END_IF;
    MM.Fault_03 := MM.Buffer[2] > MM.Setting[5] ;
END_IF;

//VFD not ready fault : 04
IF NOT MM.Feedback2 THEN
    IF PostiveEdge100ms THEN MM.Buffer[3] := MM.Buffer[3] + 1 ; END_IF;
    MM.Fault_04 := MM.Buffer[3] > MM.Setting[6] ;
END_IF;

//Emergency stop : 05
IF NOT MM.Output2 THEN
    MM.Fault_05 := True ;
END_IF;

//Maximum operating : 06
IF MM.Register[2] >= MM.Setting[1] THEN
    MM.Fault_06 := True ;
END_IF;

//Summing main faults : 00
IF MM.Fault_01 OR MM.Fault_02 OR MM.Fault_03 OR MM.Fault_04 OR MM.Fault_05 THEN
    MM.Fault_00 := True ;
ELSE
    MM.Acknowledged := False;
END_IF;

//Manual mode counter
IF MM.WorkinMode3 AND NOT MM.Edge[9] THEN 
    MM.Register[3] := MM.Register[3] + 1 ;
END_IF;  
//Motor running/stopping fault counter
IF (MM.Fault_01 OR MM.Fault_01) AND NOT MM.Fault_00 THEN 
    MM.Register[4] := MM.Register[4] + 1 ;
END_IF;  
//Motor overload fault 
IF MM.Fault_03 AND NOT MM.Fault_00 THEN 
    MM.Register[5] := MM.Register[5] + 1 ;
END_IF;
//VFD not ready fault 
IF MM.Fault_04 AND NOT MM.Fault_00 THEN 
    MM.Register[6] := MM.Register[6] + 1 ;
END_IF;   

//Access levels monitoring
IF MM.AccessLevel[3] > 9999              THEN MM.AccessLevel[3] := 9999; END_IF;
IF MM.AccessLevel[3] < MM.AccessLevel[2] THEN MM.AccessLevel[3] := MM.AccessLevel[2] + 1; END_IF;
IF MM.AccessLevel[2] < MM.AccessLevel[1] THEN MM.AccessLevel[2] := MM.AccessLevel[1] + 1; END_IF;
IF MM.AccessLevel[1] < MM.AccessLevel[0] THEN MM.AccessLevel[1] := MM.AccessLevel[0] + 1; END_IF;
IF MM.AccessLevel[0] < 0                 THEN MM.AccessLevel[0] := 0; END_IF;


//Edgging
MM.Edge[0] := MM.Bit[0] ; //Positive edge position of motor running forward
MM.Edge[1] := MM.Bit[1] ; //Positive edge position of motor running reverse

MM.Edge[8] := MM.WorkinMode0 OR MM.WorkinMode1 ; //Positive edge for inhibition & simulation

MM.Edge[9] := MM.WorkinMode3 ;

MM.Edge[10] := MM.Bit[10] ; 
MM.Edge[11] := MM.Bit[11] ;
MM.Edge[12] := MM.Bit[12] ;
MM.Edge[13] := MM.Bit[13] ;

//Main operating time [h]
IF PostiveEdge1s AND (MM.Output0 OR MM.Output1) THEN 
    MM.Register_00 := MM.Register_00 + (1.0/3600.0); 
END_IF;

//Calulating number of forced, inhibited and in fault elements [Legacy]
IF MM.WorkinMode3   THEN "DB_SCADA".MMForc  := "DB_SCADA".MMForc  + 1 ; END_IF;
IF MM.WorkinMode1   THEN "DB_SCADA".MMInhib := "DB_SCADA".MMInhib + 1 ; END_IF;
IF MM.Fault_00      THEN "DB_SCADA".MMFault := "DB_SCADA".MMFault + 1 ; END_IF;

//Resetting Acknowledgment
IF Ack AND NOT (MM.WorkinMode0 OR MM.WorkinMode1) THEN MM.Acknowledgment:=FALSE; END_IF;

END_FUNCTION
 

