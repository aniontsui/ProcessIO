FUNCTION FC1092 : VOID
NAME    : 'FC_DIO'
AUTHOR  : 'YACINEAA'
FAMILY  : 'DIO'
VERSION : '1.0'


//GNU General Public License v3.0
//--------------------------------------------------------------------------------------------------------------------------------------
//-- Object         Management of Digital input/output (DIO)
//-- Type           Function
//-- Version        1
//--------------------------------------------------------------------------------------------------------------------------------------
//--Author          Yacine A.A.
//--Organization    2020 COPAG, Industrial project management office, Department of operational technology / Taroudant, Morocco          
//--Description     This block takes care of handling for Digital inputs or outputs, this is in particular:
//                      - The activation of the object in the different modes
//                      - Turn-on delay and Turn-off delay of the object in the different modes
//                      - Interlocking the manual mode of the object
//                      - Faults calculations     
//                      - Operations counters   
//                      - Operation time
//-----------------------------------------------------------------------------------------------------------------
//--History
//--[Version]            [Name]                        [DATE]                    [Comments]
//--1.00                 Yacine AA                     13-01-21                  Creation
//--------------------------------------------------------------------------------------------------------------------------------------
//-----ToDo
//-- Calculate Hardware fault via module diagnostic 
//-- 
//---
//---
//--------------------------------------------------------------------------------------------------------------------------------------
//-----HELP
//----TypeID : 
//--- 0 : Digital input with CIP mode
//--- 1 : Digital input
//--- 3 : Digital output
//--- 2 : input or output with cycle counter 



VAR_IN_OUT
    DIO                      : UDT_DIO ; //Standerd user data type for Digital inputs or outputs DIO
END_VAR

VAR_INPUT
    PostiveEdge100ms        : BOOL ; //Positive edge for 100ms (10Hz) 
    PostiveEdge1s           : BOOL ; //Positive edge for 1s (1Hz) 
    Acknowledgment          : BOOL ; //Acknowledgment for motor zone
    Simulation              : BOOL ; //Simulation mode in motor zone
    PowerOn                 : BOOL ; //Power on signal 
END_VAR

VAR_TEMP
    Ack                     : BOOL ; //Acknowledgment temporary working bit 
    Setting00               : INT  ; //Grace period before activation output [100ms]
    Setting01               : INT  ; //Grace period before activation output [100ms]
END_VAR 



BEGIN

//Simulation = Zone Simulation or element Simulation
DIO.WorkinMode0 := Simulation OR "DB_SCADA".SimulationMode_0 ;

//Acknowledgment = Zone acknowledgment or element acknowledgment
Ack := DIO.Acknowledgment OR Acknowledgment;
//Resetting faults
IF Ack THEN
    DIO.Fault_00     := False;
    DIO.Fault_01     := False;
    DIO.Fault_02     := False;
    DIO.Fault_03     := False;
    DIO.Fault_04     := False;
    DIO.Fault_05     := False;
    DIO.Fault_06     := False;
    DIO.Fault_07     := False;
    DIO.Acknowledged := True;
END_IF;

//Deny manual modes
IF DIO.WorkinMode4  THEN DIO.WorkinMode3 := False; DIO.ForceValue := False; END_IF;

//CIP mode
IF DIO.Setting._00 = 0 THEN 
    IF DIO.WorkinMode2  THEN 
        Setting00 := DIO.Setting._04 ;
        Setting01 := DIO.Setting._05 ;
    ELSE
        Setting00 := DIO.Setting._02 ;
        Setting01 := DIO.Setting._03 ;
    END_IF;
ELSE
    DIO.WorkinMode2 := False;
END_IF;
        

//Simulation & suppression modes
IF DIO.WorkinMode0 OR DIO.WorkinMode1 THEN 
    IF NOT DIO.Edge._08 THEN DIO.Acknowledgment := True ; END_IF;
END_IF;

//Manual mode
IF DIO.WorkinMode3 THEN
    DIO.Bit._00 := DIO.ForceValue ;
    Setting00   := 0 ;
    Setting01   := 0 ;
    //Positive edge
    IF NOT DIO.Edge._09 THEN 
        DIO.Setting.Buffer._00 := 0; 
        DIO.Register._03       := DIO.Register._03 + 1 ;
    END_IF;
    IF PostiveEdge100ms AND DIO.Setting.Buffer._00 < DIO.Setting._01 THEN DIO.Setting.Buffer._00 := DIO.Setting.Buffer._00 + 1; END_IF;
    IF DIO.Setting.Buffer._00 >= DIO.Setting._01 AND DIO.Setting._01 > 0  THEN DIO.WorkinMode3 := False; DIO.ForceValue := False; END_IF;
ELSE
    //Automatic modes
    DIO.Bit._00 := DIO.Input ;
END_IF;

//Writting to value
IF DIO.Bit._00 THEN
    //Positive edge
    IF NOT DIO.Edge._00 THEN 
        DIO.Setting.Buffer._01 := 0;
        DIO.Register._01       := DIO.Register._01 + 1;
    END_IF;
    IF PostiveEdge100ms AND DIO.Setting.Buffer._01 < Setting00 THEN DIO.Setting.Buffer._01 := DIO.Setting.Buffer._01 + 1; END_IF;
    IF DIO.Setting.Buffer._01 >= Setting00 OR Setting00 <= 0   THEN DIO.Value := DIO.Bit._00; END_IF;
ELSE
    //Negative edge
    IF  DIO.Edge._00 THEN 
        DIO.Setting.Buffer._02 := 0 ; 
    END_IF;
    IF PostiveEdge100ms AND DIO.Setting._02 < Setting01 THEN DIO.Setting.Buffer._02 := DIO.Setting.Buffer._02 + 1; END_IF;
    IF DIO.Setting.Buffer._02 >= Setting01 OR Setting01 <= 0   THEN DIO.Value := DIO.Bit._00; END_IF;
END_IF; 

//Object in unconformity state (externally set) : 01
IF False THEN DIO.Fault_01 := False ; END_IF;

//Hardware fault : 02
IF False THEN DIO.Fault_02 := False ; END_IF;

//Loss of power fault : 03
IF NOT PowerOn THEN DIO.Fault_03 := True ; END_IF;

//Maximum operating time before preventive maintenance reached : 04
IF (DIO.Register._01 > 70000) AND DIO.Setting._00 = 2 THEN DIO.Fault_04 := True ; END_IF;

//Summing main faults : 00
IF (DIO.Fault_01 OR DIO.Fault_02 OR DIO.Fault_03) AND NOT (DIO.WorkinMode0 OR DIO.WorkinMode1) THEN
    IF NOT DIO.Fault_00 THEN DIO.Register._02 := DIO.Register._02 + 1; END_IF;
    DIO.Fault_00 := True ;
ELSE
    DIO.Acknowledged := False;
END_IF;

//Access levels monitoring
IF DIO.AccessLevel._03 > 9999                THEN DIO.AccessLevel._03 := 9999; END_IF;
IF DIO.AccessLevel._03 < DIO.AccessLevel._02 THEN DIO.AccessLevel._03 := DIO.AccessLevel._02 + 1; END_IF;
IF DIO.AccessLevel._02 < DIO.AccessLevel._01 THEN DIO.AccessLevel._02 := DIO.AccessLevel._01 + 1; END_IF;
IF DIO.AccessLevel._01 < DIO.AccessLevel._00 THEN DIO.AccessLevel._01 := DIO.AccessLevel._00 + 1; END_IF;
IF DIO.AccessLevel._00 < 0                   THEN DIO.AccessLevel._00 := 0; END_IF;

//Edgging
DIO.Edge._00 := DIO.Bit._00 ; 

DIO.Edge._08 := DIO.WorkinMode0 OR DIO.WorkinMode1 ; 

DIO.Edge._09 := DIO.WorkinMode3 ;


//Main operating time [h]
IF PostiveEdge1s AND DIO.Value THEN 
    DIO.Register._00 := DIO.Register._00 + (1.0/3600.0); 
END_IF;

//Calulating number of forced, inhibited and in fault elements [Legacy]
IF DIO.WorkinMode3   THEN "DB_SCADA".DIOForc  := "DB_SCADA".DIOForc  + 1 ; END_IF;
IF DIO.WorkinMode1   THEN "DB_SCADA".DIOInhib := "DB_SCADA".DIOInhib + 1 ; END_IF;
IF DIO.Fault_00      THEN "DB_SCADA".DIOFault := "DB_SCADA".DIOFault + 1 ; END_IF;

//Resetting Acknowledgment
IF Ack AND NOT (DIO.WorkinMode0 OR DIO.WorkinMode1) THEN DIO.Acknowledgment:=FALSE; END_IF;

END_FUNCTION
 

