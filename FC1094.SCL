FUNCTION FC1093 : VOID
NAME    : 'FC_AO'
AUTHOR  : 'YACINEAA'
FAMILY  : 'AO'
VERSION : '1.0'


//GNU General Public License v3.0
//--------------------------------------------------------------------------------------------------------------------------------------
//-- Object         Management of Analog outputs (AO)
//-- Type           Function
//-- Version        1
//--------------------------------------------------------------------------------------------------------------------------------------
//--Author          Yacine A.A.
//--Organization    2020 COPAG, Industrial project management office, Department of operational technology / Taroudant, Morocco          
//--Description     This block takes care of handling for analog output objects, this is in particular:
//                      - The activation of the Internal Status in the different modes.
//                      - Unscaling OF physical Input value into raw output.
//                      - Limitation of output value.
//                      - Faults handling.
//-----------------------------------------------------------------------------------------------------------------
//--History
//--[Version]            [Name]                        [DATE]                    [Comments]
//--1.00                 Yacine AA                     25-01-21                  Creation
//--------------------------------------------------------------------------------------------------------------------------------------
//-----ToDo
//-- Calculate Hardware fault via module diagnostic 
//-- 
//---
//---
//--------------------------------------------------------------------------------------------------------------------------------------
//-----HELP
//----TypeID : 
//--- 0 : 
//--- 1 : 
//--- 3 : 
//--- 2 : 



VAR_IN_OUT
    AO                      : UDT_AO ; //Standerd user data type for Analog inputs AO
END_VAR

VAR_INPUT
    PostiveEdge100ms        : BOOL ; //Positive edge for 100ms (10Hz) 
    PostiveEdge1s           : BOOL ; //Positive edge for 1s (1Hz) 
    Acknowledgment          : BOOL ; //Acknowledgment for motor zone
    Simulation              : BOOL ; //Simulation mode in motor zone
END_VAR

VAR_TEMP
    Ack                     : BOOL ; //Acknowledgment temporary working bit 
END_VAR 



BEGIN

//Simulation = Zone Simulation or element Simulation
AO.WorkingMode0 := Simulation OR "DB_SCADA".SimulationMode_0 ;

//Acknowledgment = Zone acknowledgment or element acknowledgment
Ack := AO.Acknowledgment OR Acknowledgment;
//Resetting faults
IF Ack THEN
    AO.Fault_00     := False;
    AO.Fault_01     := False;
    AO.Fault_02     := False;
    AO.Fault_03     := False;
    AO.Fault_04     := False;
    AO.Fault_05     := False;
    AO.Fault_06     := False;
    AO.Fault_07     := False;
    AO.Acknowledged := True;
END_IF;

//Deny suppression modes
IF AO.WorkingMode2  THEN 
    AO.WorkingMode1 := False; 
    AO.WorkingMode4 := True;
END_IF;

//Deny manual modes
IF AO.WorkingMode4  THEN AO.WorkingMode3 := False; END_IF;

//Manual Mode
IF NOT AO.WorkingMode3 THEN AO.Value := AO.Input; END_IF;

//Limitting
IF AO.Setting._07 < AO.Setting._05 THEN AO.Setting._07 := AO.Setting._05; END_IF;
IF AO.Setting._08 > AO.Setting._06 THEN AO.Setting._08 := AO.Setting._06; END_IF;
IF NOT AO.WorkingMode5 THEN
    IF AO.Value > AO.Setting._06 THEN
        AO.Fault_01 := True;
        IF AO.Setting._06 > AO.Setting._05 THEN AO.Value :=  AO.Setting._06; END_IF;
        IF AO.Setting._06 < AO.Setting._05 THEN AO.Value :=  AO.Setting._05; END_IF;
    END_IF;
    IF AO.Value < AO.Setting._05 THEN
        AO.Fault_04 := True;
        IF AO.Setting._06 > AO.Setting._05 THEN AO.Value :=  AO.Setting._05; END_IF;
        IF AO.Setting._06 < AO.Setting._05 THEN AO.Value :=  AO.Setting._06; END_IF;
    END_IF;
ELSE
    IF AO.Value > AO.Setting._08 THEN
        IF AO.Setting._08 > AO.Setting._07 THEN AO.Value :=  AO.Setting._08; END_IF;
        IF AO.Setting._08 < AO.Setting._07 THEN AO.Value :=  AO.Setting._07; END_IF;
    END_IF;
    IF AO.Value < AO.Setting._07 THEN
        IF AO.Setting._08 > AO.Setting._07 THEN AO.Value :=  AO.Setting._07; END_IF;
        IF AO.Setting._08 < AO.Setting._07 THEN AO.Value :=  AO.Setting._08; END_IF;
    END_IF;
END_IF;   

//Unscalling  
IF AO.Setting._06 > AO.Setting._05 THEN  
    AO.Output := REAL_TO_INT(AO.Setting._03 + (((AO.Value - AO.Setting._05)*(AO.Setting._04 - AO.Setting._03))/(AO.Setting._06 - AO.Setting._05)));
END_IF;        

//Manual & suppression modes
IF AO.WorkingMode1 AND NOT AO.Bit._01 THEN AO.Register._02 := AO.Register._02 + 1; AO.Acknowledgment := True ; END_IF;
IF AO.WorkingMode3 AND NOT AO.Bit._03 THEN AO.Register._01 := AO.Register._01 + 1; END_IF;

//Summing main faults : 00
IF (AO.Fault_01 OR AO.Fault_04 OR AO.Fault_05 OR AO.Fault_06 OR AO.Fault_07) AND NOT (AO.WorkingMode0 OR AO.WorkingMode1 OR AO.WorkingMode3) THEN
    IF PostiveEdge100ms THEN AO.Setting.Buffer._00 := AO.Setting.Buffer._00 + 1 ; END_IF;
    IF AO.Setting.Buffer._00 >= AO.Setting._01 THEN AO.Fault_00 := True ; END_IF;
    IF AO.Fault_00 AND NOT AO.Bit._00 THEN AO.Register._00 := AO.Register._00 + 1; END_IF;
ELSE
    AO.Acknowledged       := False;
    AO.Setting.Buffer._00 := 0;
END_IF;


//Access levels monitoring
IF AO.AccessLevel._03 > 9999                THEN AO.AccessLevel._03 := 9999; END_IF;
IF AO.AccessLevel._03 < AO.AccessLevel._02  THEN AO.AccessLevel._03 := AO.AccessLevel._02 + 1; END_IF;
IF AO.AccessLevel._02 < AO.AccessLevel._01  THEN AO.AccessLevel._02 := AO.AccessLevel._01 + 1; END_IF;
IF AO.AccessLevel._01 < AO.AccessLevel._00  THEN AO.AccessLevel._01 := AO.AccessLevel._00 + 1; END_IF;
IF AO.AccessLevel._00 < 0                   THEN AO.AccessLevel._00 := 0; END_IF;

//Edgging
AO.Bit._00 := AO.Fault_00 ;     //Sum of object faults
AO.Bit._01 := AO.WorkingMode1 ; //Mode suppression
AO.Bit._03 := AO.WorkingMode3 ; //Mode manual

//Calulating number of forced, inhibited and in fault elements [Legacy]
IF AO.WorkingMode3   THEN "DB_SCADA".AOForc  := "DB_SCADA".AOForc  + 1 ; END_IF;
IF AO.WorkingMode1   THEN "DB_SCADA".AOInhib := "DB_SCADA".AOInhib + 1 ; END_IF;
IF AO.Fault_00       THEN "DB_SCADA".AOFault := "DB_SCADA".AOFault + 1 ; END_IF;

//Resetting Acknowledgment
IF Ack AND NOT (AO.WorkingMode0 OR AO.WorkingMode1) THEN AO.Acknowledgment:=FALSE; END_IF;

END_FUNCTION
 

